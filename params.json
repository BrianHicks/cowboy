{"tagline":"It works on ranges.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Cowboy","body":"[![Build Status](https://secure.travis-ci.org/BrianHicks/cowboy.png?branch=master)](https://travis-ci.org/BrianHicks/cowboy)\r\n\r\n## Installation\r\n\r\nIn the **future** you'll be able to install from PyPI. [Progress on\r\nrelease.](https://github.com/BrianHicks/cowboy/issues?milestone=1&state=open)\r\nFor now, do this to get the non-production-ready code on your machine:\r\n\r\n    git clone https://github.com/BrianHicks/cowboy.git\r\n    pip install -r requirements.txt\r\n    nosetests\r\n\r\n## How to do stuff with Cowboy\r\n\r\nMake a range:\r\n\r\n```python\r\nimport datetime\r\nfrom cowboy import DateRange\r\n\r\nfirst_quarter = DateRange(\r\n    start=datetime(2012, 1, 1),\r\n    end=datetime(2012, 3, 31)\r\n)\r\n```\r\n\r\nSee if an arbitrary value is within the range:\r\n\r\n```python\r\nfirst_quarter.contains(datetime(2012, 2, 1)) # True\r\n```\r\n\r\nStep through all the values in the range:\r\n\r\n```python\r\nfrom cowboy import NumberRange\r\n\r\none_through_ten = NumberRange(1, 10)\r\n\r\none_through_ten.steps(granularity=1) # Generator yielding [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n```\r\n\r\nAdd two ranges:\r\n\r\n```python\r\nfrom cowboy import NumberRange\r\n\r\nfst, snd = NumberRange(1, 2), NumberRange(3, 4)\r\n\r\nfst + snd # <NumberRange: 1 to 4>\r\n```\r\n\r\nCheck validity of a range:\r\n\r\n```python\r\nfrom cowboy import NumberRange\r\n\r\nNumberRange(1, 2).is_valid # True\r\nNumberRange(2, 1).is_valid # False\r\n```\r\n\r\n## Make your own ranges\r\n\r\nSay you wanted to make your own Range for chars, so that `CharRange('a', 'c')`\r\nmade sense. That class would look something like this:\r\n\r\n```python\r\nfrom cowboy.base import Range\r\n\r\nclass CharRange(Range):\r\n    'a range of characters'\r\n    def steps(self, granularity=1): # most subclasses will override just granularity\r\n        current = ord(self.start)\r\n        while current <= ord(self.end):\r\n            yield chr(current)\r\n            current += granularity\r\n```\r\n\r\nNow you can use all the methods outlined above to operate on ranges of characters.\r\n"}